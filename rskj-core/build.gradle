import java.util.jar.JarEntry
import java.util.jar.JarFile
import java.util.jar.JarOutputStream

plugins {
    id 'application'
}

apply plugin: 'maven'
apply plugin: 'jacoco'

test {
    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor}")
    }

    jvmArgs '-Xss32m', '-Xmx3G'

    testLogging {
        events "failed"
        exceptionFormat "short"
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://deps.rsklabs.io"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'co.rsk.Start'
applicationDefaultJvmArgs = ["-server", "-Xss32m", "-Xms3G", "-XX:+UseCompressedOops", "-XX:-OmitStackTraceInFastThrow"]

tasks.withType(JavaCompile) {
    options.warnings = false
    options.encoding = 'UTF-8'
    options.compilerArgs << '-XDignore.symbol.file'
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true

    dirMode = 0775
    fileMode = 0664
}

ext {
    slf4jVersion = '1.7.25'
    leveldbVersion = '0.9'
    junitVersion = '4.12'
    mockitoVersion = '2.23.4'
    powermockitoVersion = '2.0.2'
    rskLllVersion = '0.0.2'
    logbackVersion = '1.2.2'
    bitcoinjVersion = '0.14.4-rsk-10'
    nettyVersion = '4.0.56.Final'
    nativeLibrary = '1.2.0'
}

dependencies {
    implementation "com.madgag.spongycastle:core:1.52.0.0"
    implementation "io.netty:netty-codec-http:$nettyVersion"
    implementation "org.bouncycastle:bclcrypto-jdk15on:1.59"
    implementation "org.iq80.leveldb:leveldb:${leveldbVersion}"
    implementation "org.fusesource.leveldbjni:leveldbjni:1.8"
    implementation "org.ethereum:leveldbjni-all:1.18.3"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.8.7"
    implementation "org.apache.commons:commons-lang3:3.5"
    implementation "com.typesafe:config:1.3.3"
    implementation "org.mapdb:mapdb:2.0-beta13"
    implementation "co.rsk.bitcoinj:bitcoinj-thin:${bitcoinjVersion}"
    implementation 'com.github.briandilley.jsonrpc4j:jsonrpc4j:1.5.1'
    implementation 'com.sun.xml.ws:jaxws-rt:2.3.3'
    implementation "co.rsk:native:${nativeLibrary}"

    runtimeOnly "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
    runtimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"
    runtimeOnly "ch.qos.logback:logback-core:${logbackVersion}"

    testImplementation "com.googlecode.json-simple:json-simple:1.1.1"
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.powermock:powermock-module-junit4:${powermockitoVersion}"
    testImplementation "org.powermock:powermock-api-mockito2:${powermockitoVersion}"
    testImplementation "co.rsk:lll-compiler:${rskLllVersion}"
    testImplementation "org.awaitility:awaitility:3.0.0"
    testImplementation 'commons-io:commons-io:2.5'
    testImplementation 'commons-codec:commons-codec:1.10'
    testImplementation 'com.squareup.okhttp:okhttp-ws:2.7.2'
}

javadoc {
    options.author = true
    options.header = "RskJ"
    options.addStringOption('-quiet')
    options.encoding = "UTF-8"
}

def generatedResources = "$buildDir/generated-resources"
sourceSets {
    main {
        resources {
            srcDirs += generatedResources
        }
    }
}

task generateResources {
    doLast {
        mkdir generatedResources
        def generated = new File(generatedResources, 'build-info.properties')
        def commitHash = gitCommitHash()
        def currentBranch = gitCurrentBranch()
        generated.text = """
build.hash=$commitHash
build.branch=$currentBranch
"""
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

jar {
    dependsOn 'generateResources'
    def commitHash = gitCommitHash()
    def currentBranch = gitCurrentBranch()
    manifest {
        attributes  'Git-Commit': commitHash,
                'Git-Branch': currentBranch
    }
    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from generatedResources
}

task generatePom(dependsOn: jar) {
    def jarName = jar.outputs.files.singleFile.name
    def pomFile = "$libsDir/${jarName.take(jarName.lastIndexOf('.'))}.pom"
    ext.file = new File(pomFile)
    doLast {
        pom {
            project {
                groupId project.group
                artifactId project.name
                version project.version

                licenses {
                    license {
                        name 'GNU General Public License (GPL) version 3.0'
                        url 'http://www.gnu.org/licenses/gpl-3.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }.writeTo(pomFile)
    }
}

task fatJar(type: Jar, dependsOn: jar) {
    archiveClassifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': "$mainClassName"
    }

    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
    exclude 'module-info.class'

    for (def jar in configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }) {
        from(jar) {
            eachFile { details -> amendPathIfNeeded(details) }
        }
    }

    with jar
}

tasks.withType(Tar) {
    compression = Compression.GZIP
    archiveExtension = 'tar.gz'
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives jar
    archives(generatePom.file) {
        type 'text'
        builtBy generatePom
    }
    archives fatJar
    archives distTar
}

def gitCurrentBranch() {
    def process = "git rev-parse --abbrev-ref HEAD".execute()
    return process.text.trim()
}

def gitCommitHash() {
    def process = "git rev-parse --short HEAD".execute()
    return process.text.trim()
}

static def amendPathIfNeeded(details) {
    def uPath = details.path.toUpperCase()
    if (uPath.startsWith("META-INF/LICENSE") || uPath.startsWith("META-INF/NOTICE")) {
        def originalFile = details.file as File
        def jarName = originalFile.parentFile.parentFile.name.split(".jar")[0]
        def newPath = originalFile.parentFile.name + "/" + jarName + "_" + originalFile.name
        details.path = newPath
    }
}
